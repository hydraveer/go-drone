kind: pipeline
type: docker
name: calculator

global-variables:
  go_image: &go_image golang:1.24.2-bullseye
  environment: &default_environment
    GOOS: linux
    GOARCH: amd64
    CGO_ENABLED: 1
    COMPONENT: calculator
    IMAGE: calculator
    VERSION: 1.0.0
    PACKAGE_TYPE: DEBIAN

trigger:
  ref:
    include:
      - refs/pull/**
      - refs/push/**
      - refs/tags/**
      - refs/heads/develop
      - refs/heads/main


services:
  - name: docker-sandbox
    image: docker:dind
    privileged: true
    volumes:
      - name: sandbox-docker-sock
        path: /var/run

volumes:
  - name: sandbox-docker-sock
    temp: { }
  - name: deps
    temp: { }

steps:
  - name: wait-for-sandbox
    image: docker
    commands:
      - apk add bash
      - chmod +x ./waitForSandbox.sh
      - ./waitForSandbox.sh
    volumes:
      - name: sandbox-docker-sock
        path: /var/run
        
  - name: dependencies
    image: *go_image
    environment:
      <<: *default_environment
    volumes:
      - name: deps
        path: /go
    commands:
      - go get -t ./...
    depends_on:
      - wait-for-sandbox
  
  - name: lint-check
    image: golangci/golangci-lint:v1.64.8
    pull: if-not-exists
    commands:
      # runs all linters defined in .golangci.yml
      - golangci-lint run --timeout 20m
    depends_on:
      - dependencies
    when:
      event:
        - pull_request

  - name: unit-test
    image: *go_image
    environment:
      <<: *default_environment
    volumes:
      - name: deps
        path: /go
    commands:
      - go clean -testcache && go test -coverprofile coverage.out -shuffle on -count 2
    depends_on:
      - lint-check
    when:
      event:
        - pull_request
  
  - name: coverage-check
    image: *go_image
    environment:
      <<: *default_environment
    commands:
      - COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
      - echo "Total coverage is $COVERAGE%"
      - if [ $(echo "$COVERAGE < 80" | awk '{print ($1 < $2)}') -eq 0 ]; then echo "Coverage is below 80%"; exit 1; fi
    depends_on:
      - unit-test
    when:
      event:
        - pull_request
  
  - name: build
    image: *go_image
    environment:
      <<: *default_environment
    volumes:
      - name: deps
        path: /go/pkg/mod
    commands: 
      - go mod download
      - go build -v -tags netgo -ldflags '-w' -o bootstrap
    depends_on: 
      - coverage-check
  
  - name: build-image
    image: docker
    pull: if-not-exists
    volumes:
      - name: sandbox-docker-sock
        path: /var/run
    environment:
      <<: *default_environment
    commands:
      - echo "Image building"
      - docker build -t $${IMAGE}:$DRONE_BUILD_NUMBER -f ./Dockerfile .
      - docker images
      - echo "Image build complete"
    depends_on: 
      - docker-sandbox