kind: pipeline
type: docker
name: calculator

global-variables:
  go_image: &go_image golang:1.24.2-bullseye
  environment: &default_environment
    GOOS: linux
    GOARCH: amd64
    CGO_ENABLED: 1
    COMPONENT: calculator
    IMAGE: calculator
    VERSION: 1.0.0
    PACKAGE_TYPE: DEBIAN

trigger:
  ref:
    include:
      - refs/pull/**
      - refs/push/**
      - refs/tags/**
      - refs/heads/develop
      - refs/heads/main

# Using host's Docker daemon instead of DinD
volumes:
  - name: docker-socket
    host:
      path: /var/run/docker.sock
  - name: deps
    temp: {}

steps:
  - name: dependencies
    image: *go_image
    environment:
      <<: *default_environment
    volumes:
      - name: deps
        path: /go
    commands:
      - go get -t ./...

  - name: lint-check
    image: golangci/golangci-lint:v1.64.8
    pull: if-not-exists
    commands:
      - golangci-lint run --timeout 20m
    depends_on:
      - dependencies
    when:
      event:
        - pull_request

  - name: unit-test
    image: *go_image
    environment:
      <<: *default_environment
    volumes:
      - name: deps
        path: /go
    commands:
      - go clean -testcache && go test -coverprofile coverage.out -shuffle on -count 2
    depends_on:
      - lint-check
    when:
      event:
        - pull_request

  - name: coverage-check
    image: *go_image
    environment:
      <<: *default_environment
    commands:
      - COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
      - echo "Total coverage is $COVERAGE%"
      - if [ $(echo "$COVERAGE < 80" | awk '{print ($1 < $2)}') -eq 0 ]; then echo "Coverage is below 80%"; exit 1; fi
    depends_on:
      - unit-test
    when:
      event:
        - pull_request

  - name: build
    image: *go_image
    environment:
      <<: *default_environment
    volumes:
      - name: deps
        path: /go/pkg/mod
    commands:
      - go mod download
      - go build -v -tags netgo -ldflags '-w' -o bootstrap
    depends_on:
      - coverage-check

  - name: build-image
    image: docker
    volumes:
      - name: docker-socket
        path: /var/run/docker.sock
    commands:
      - echo "Image start building..."
      - docker build --no-cache -f ./Dockerfile -t calculator:latest .
      - docker images
      - echo "Image build successfully."
    depends_on:
      - build

  - name: scan-image
    image: aquasec/trivy:0.41.0
    environment:
      DOCKER_HOST: tcp://docker-sandbox:2375
      # Skip downloading DB, use lightweight scanning mode
      TRIVY_SKIP_DB_UPDATE: "true"
      TRIVY_OFFLINE_SCAN: "true"
      TRIVY_LIGHT: "true"
      TRIVY_CACHE_DIR: "/dev/shm/trivy"
    commands:
      - export SCAN_IMAGE=calculator:latest
      - export TRIVY_DISABLE_VET_NOTICE=0
      - echo "Checking available disk space:"
      - df -h
      # Aggressive cleanup
      - rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* || true
      - echo "Disk space after cleanup:"
      - df -h
      # Very lightweight scanning, focusing on critical issues only
      - trivy image --skip-db-update --offline-scan --light --quiet --exit-code 0 --ignore-unfixed --severity CRITICAL "$SCAN_IMAGE" || echo "Scan completed with issues, but continuing build"
    volumes:
      - name: sandbox-docker-sock
        path: /var/run/docker.sock
    volumes:
      - name: sandbox-docker-sock
        path: /var/run/docker.sock
    depends_on:
      - build-image